export const AGENT_METHODS = {
    authenticate: "authenticate",
    initialize: "initialize",
    session_cancel: "session/cancel",
    session_load: "session/load",
    session_new: "session/new",
    session_prompt: "session/prompt",
    session_set_mode: "session/set_mode",
    session_set_model: "session/set_model",
};
export const CLIENT_METHODS = {
    fs_read_text_file: "fs/read_text_file",
    fs_write_text_file: "fs/write_text_file",
    session_request_permission: "session/request_permission",
    session_update: "session/update",
    terminal_create: "terminal/create",
    terminal_kill: "terminal/kill",
    terminal_output: "terminal/output",
    terminal_release: "terminal/release",
    terminal_wait_for_exit: "terminal/wait_for_exit",
};
export const PROTOCOL_VERSION = 1;
import { z } from "zod";
/** @internal */
export const writeTextFileRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    content: z.string(),
    path: z.string(),
    sessionId: z.string(),
});
/** @internal */
export const readTextFileRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    limit: z.number().optional().nullable(),
    line: z.number().optional().nullable(),
    path: z.string(),
    sessionId: z.string(),
});
/** @internal */
export const terminalOutputRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    sessionId: z.string(),
    terminalId: z.string(),
});
/** @internal */
export const releaseTerminalRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    sessionId: z.string(),
    terminalId: z.string(),
});
/** @internal */
export const waitForTerminalExitRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    sessionId: z.string(),
    terminalId: z.string(),
});
/** @internal */
export const killTerminalCommandRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    sessionId: z.string(),
    terminalId: z.string(),
});
/** @internal */
export const extMethodRequestSchema = z.record(z.unknown());
/** @internal */
export const roleSchema = z.union([z.literal("assistant"), z.literal("user")]);
/** @internal */
export const textResourceContentsSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    mimeType: z.string().optional().nullable(),
    text: z.string(),
    uri: z.string(),
});
/** @internal */
export const blobResourceContentsSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    blob: z.string(),
    mimeType: z.string().optional().nullable(),
    uri: z.string(),
});
/** @internal */
export const toolKindSchema = z.union([
    z.literal("read"),
    z.literal("edit"),
    z.literal("delete"),
    z.literal("move"),
    z.literal("search"),
    z.literal("execute"),
    z.literal("think"),
    z.literal("fetch"),
    z.literal("switch_mode"),
    z.literal("other"),
]);
/** @internal */
export const toolCallStatusSchema = z.union([
    z.literal("pending"),
    z.literal("in_progress"),
    z.literal("completed"),
    z.literal("failed"),
]);
/** @internal */
export const writeTextFileResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
});
/** @internal */
export const readTextFileResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    content: z.string(),
});
/** @internal */
export const requestPermissionResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    outcome: z.union([
        z.object({
            outcome: z.literal("cancelled"),
        }),
        z.object({
            optionId: z.string(),
            outcome: z.literal("selected"),
        }),
    ]),
});
/** @internal */
export const createTerminalResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    terminalId: z.string(),
});
/** @internal */
export const releaseTerminalResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
});
/** @internal */
export const waitForTerminalExitResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    exitCode: z.number().optional().nullable(),
    signal: z.string().optional().nullable(),
});
/** @internal */
export const killTerminalResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
});
/** @internal */
export const extMethodResponseSchema = z.record(z.unknown());
/** @internal */
export const cancelNotificationSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    sessionId: z.string(),
});
/** @internal */
export const extNotificationSchema = z.record(z.unknown());
/** @internal */
export const authenticateRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    methodId: z.string(),
});
/** @internal */
export const setSessionModeRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    modeId: z.string(),
    sessionId: z.string(),
});
/** @internal */
export const setSessionModelRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    modelId: z.string(),
    sessionId: z.string(),
});
/** @internal */
export const extMethodRequest1Schema = z.record(z.unknown());
/** @internal */
export const httpHeaderSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    name: z.string(),
    value: z.string(),
});
/** @internal */
export const annotationsSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    audience: z.array(roleSchema).optional().nullable(),
    lastModified: z.string().optional().nullable(),
    priority: z.number().optional().nullable(),
});
/** @internal */
export const embeddedResourceResourceSchema = z.union([
    textResourceContentsSchema,
    blobResourceContentsSchema,
]);
/** @internal */
export const authenticateResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
});
/** @internal */
export const setSessionModeResponseSchema = z.object({
    meta: z.unknown().optional(),
});
/** @internal */
export const promptResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    stopReason: z.union([
        z.literal("end_turn"),
        z.literal("max_tokens"),
        z.literal("max_turn_requests"),
        z.literal("refusal"),
        z.literal("cancelled"),
    ]),
});
/** @internal */
export const setSessionModelResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
});
/** @internal */
export const extMethodResponse1Schema = z.record(z.unknown());
/** @internal */
export const sessionModeIdSchema = z.string();
/** @internal */
export const extNotification1Schema = z.record(z.unknown());
/** @internal */
export const unstructuredCommandInputSchema = z.object({
    hint: z.string(),
});
/** @internal */
export const permissionOptionSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    kind: z.union([
        z.literal("allow_once"),
        z.literal("allow_always"),
        z.literal("reject_once"),
        z.literal("reject_always"),
    ]),
    name: z.string(),
    optionId: z.string(),
});
/** @internal */
export const toolCallContentSchema = z.union([
    z.object({
        content: z.union([
            z.object({
                _meta: z.record(z.unknown()).optional(),
                annotations: annotationsSchema.optional().nullable(),
                text: z.string(),
                type: z.literal("text"),
            }),
            z.object({
                _meta: z.record(z.unknown()).optional(),
                annotations: annotationsSchema.optional().nullable(),
                data: z.string(),
                mimeType: z.string(),
                type: z.literal("image"),
                uri: z.string().optional().nullable(),
            }),
            z.object({
                _meta: z.record(z.unknown()).optional(),
                annotations: annotationsSchema.optional().nullable(),
                data: z.string(),
                mimeType: z.string(),
                type: z.literal("audio"),
            }),
            z.object({
                _meta: z.record(z.unknown()).optional(),
                annotations: annotationsSchema.optional().nullable(),
                description: z.string().optional().nullable(),
                mimeType: z.string().optional().nullable(),
                name: z.string(),
                size: z.number().optional().nullable(),
                title: z.string().optional().nullable(),
                type: z.literal("resource_link"),
                uri: z.string(),
            }),
            z.object({
                _meta: z.record(z.unknown()).optional(),
                annotations: annotationsSchema.optional().nullable(),
                resource: embeddedResourceResourceSchema,
                type: z.literal("resource"),
            }),
        ]),
        type: z.literal("content"),
    }),
    z.object({
        _meta: z.record(z.unknown()).optional(),
        newText: z.string(),
        oldText: z.string().optional().nullable(),
        path: z.string(),
        type: z.literal("diff"),
    }),
    z.object({
        terminalId: z.string(),
        type: z.literal("terminal"),
    }),
]);
/** @internal */
export const toolCallLocationSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    line: z.number().optional().nullable(),
    path: z.string(),
});
/** @internal */
export const envVariableSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    name: z.string(),
    value: z.string(),
});
/** @internal */
export const terminalExitStatusSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    exitCode: z.number().optional().nullable(),
    signal: z.string().optional().nullable(),
});
/** @internal */
export const fileSystemCapabilitySchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    readTextFile: z.boolean().optional(),
    writeTextFile: z.boolean().optional(),
});
/** @internal */
export const stdioSchema = z.object({
    args: z.array(z.string()),
    command: z.string(),
    env: z.array(envVariableSchema),
    name: z.string(),
});
/** @internal */
export const mcpServerSchema = z.union([
    z.object({
        headers: z.array(httpHeaderSchema),
        name: z.string(),
        type: z.literal("http"),
        url: z.string(),
    }),
    z.object({
        headers: z.array(httpHeaderSchema),
        name: z.string(),
        type: z.literal("sse"),
        url: z.string(),
    }),
    stdioSchema,
]);
/** @internal */
export const contentBlockSchema = z.union([
    z.object({
        _meta: z.record(z.unknown()).optional(),
        annotations: annotationsSchema.optional().nullable(),
        text: z.string(),
        type: z.literal("text"),
    }),
    z.object({
        _meta: z.record(z.unknown()).optional(),
        annotations: annotationsSchema.optional().nullable(),
        data: z.string(),
        mimeType: z.string(),
        type: z.literal("image"),
        uri: z.string().optional().nullable(),
    }),
    z.object({
        _meta: z.record(z.unknown()).optional(),
        annotations: annotationsSchema.optional().nullable(),
        data: z.string(),
        mimeType: z.string(),
        type: z.literal("audio"),
    }),
    z.object({
        _meta: z.record(z.unknown()).optional(),
        annotations: annotationsSchema.optional().nullable(),
        description: z.string().optional().nullable(),
        mimeType: z.string().optional().nullable(),
        name: z.string(),
        size: z.number().optional().nullable(),
        title: z.string().optional().nullable(),
        type: z.literal("resource_link"),
        uri: z.string(),
    }),
    z.object({
        _meta: z.record(z.unknown()).optional(),
        annotations: annotationsSchema.optional().nullable(),
        resource: embeddedResourceResourceSchema,
        type: z.literal("resource"),
    }),
]);
/** @internal */
export const authMethodSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    description: z.string().optional().nullable(),
    id: z.string(),
    name: z.string(),
});
/** @internal */
export const mcpCapabilitiesSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    http: z.boolean().optional(),
    sse: z.boolean().optional(),
});
/** @internal */
export const promptCapabilitiesSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    audio: z.boolean().optional(),
    embeddedContext: z.boolean().optional(),
    image: z.boolean().optional(),
});
/** @internal */
export const modelInfoSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    description: z.string().optional().nullable(),
    modelId: z.string(),
    name: z.string(),
});
/** @internal */
export const sessionModeSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    description: z.string().optional().nullable(),
    id: sessionModeIdSchema,
    name: z.string(),
});
/** @internal */
export const sessionModelStateSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    availableModels: z.array(modelInfoSchema),
    currentModelId: z.string(),
});
/** @internal */
export const sessionModeStateSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    availableModes: z.array(sessionModeSchema),
    currentModeId: z.string(),
});
/** @internal */
export const planEntrySchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    content: z.string(),
    priority: z.union([z.literal("high"), z.literal("medium"), z.literal("low")]),
    status: z.union([
        z.literal("pending"),
        z.literal("in_progress"),
        z.literal("completed"),
    ]),
});
/** @internal */
export const availableCommandInputSchema = unstructuredCommandInputSchema;
/** @internal */
export const clientNotificationSchema = z.union([
    cancelNotificationSchema,
    extNotificationSchema,
]);
/** @internal */
export const createTerminalRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    args: z.array(z.string()).optional(),
    command: z.string(),
    cwd: z.string().optional().nullable(),
    env: z.array(envVariableSchema).optional(),
    outputByteLimit: z.number().optional().nullable(),
    sessionId: z.string(),
});
/** @internal */
export const terminalOutputResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    exitStatus: terminalExitStatusSchema.optional().nullable(),
    output: z.string(),
    truncated: z.boolean(),
});
/** @internal */
export const newSessionRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    cwd: z.string(),
    mcpServers: z.array(mcpServerSchema),
});
/** @internal */
export const loadSessionRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    cwd: z.string(),
    mcpServers: z.array(mcpServerSchema),
    sessionId: z.string(),
});
/** @internal */
export const promptRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    prompt: z.array(contentBlockSchema),
    sessionId: z.string(),
});
/** @internal */
export const newSessionResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    models: sessionModelStateSchema.optional().nullable(),
    modes: sessionModeStateSchema.optional().nullable(),
    sessionId: z.string(),
});
/** @internal */
export const loadSessionResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    models: sessionModelStateSchema.optional().nullable(),
    modes: sessionModeStateSchema.optional().nullable(),
});
/** @internal */
export const toolCallUpdateSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    content: z.array(toolCallContentSchema).optional().nullable(),
    kind: toolKindSchema.optional().nullable(),
    locations: z.array(toolCallLocationSchema).optional().nullable(),
    rawInput: z.record(z.unknown()).optional(),
    rawOutput: z.record(z.unknown()).optional(),
    status: toolCallStatusSchema.optional().nullable(),
    title: z.string().optional().nullable(),
    toolCallId: z.string(),
});
/** @internal */
export const clientCapabilitiesSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    fs: fileSystemCapabilitySchema.optional(),
    terminal: z.boolean().optional(),
});
/** @internal */
export const agentCapabilitiesSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    loadSession: z.boolean().optional(),
    mcpCapabilities: mcpCapabilitiesSchema.optional(),
    promptCapabilities: promptCapabilitiesSchema.optional(),
});
/** @internal */
export const availableCommandSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    description: z.string(),
    input: availableCommandInputSchema.optional().nullable(),
    name: z.string(),
});
/** @internal */
export const clientResponseSchema = z.union([
    writeTextFileResponseSchema,
    readTextFileResponseSchema,
    requestPermissionResponseSchema,
    createTerminalResponseSchema,
    terminalOutputResponseSchema,
    releaseTerminalResponseSchema,
    waitForTerminalExitResponseSchema,
    killTerminalResponseSchema,
    extMethodResponseSchema,
]);
/** @internal */
export const requestPermissionRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    options: z.array(permissionOptionSchema),
    sessionId: z.string(),
    toolCall: toolCallUpdateSchema,
});
/** @internal */
export const initializeRequestSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    clientCapabilities: clientCapabilitiesSchema.optional(),
    protocolVersion: z.number(),
});
/** @internal */
export const initializeResponseSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    agentCapabilities: agentCapabilitiesSchema.optional(),
    authMethods: z.array(authMethodSchema).optional(),
    protocolVersion: z.number(),
});
/** @internal */
export const sessionNotificationSchema = z.object({
    _meta: z.record(z.unknown()).optional(),
    sessionId: z.string(),
    update: z.union([
        z.object({
            content: contentBlockSchema,
            sessionUpdate: z.literal("user_message_chunk"),
        }),
        z.object({
            content: contentBlockSchema,
            sessionUpdate: z.literal("agent_message_chunk"),
        }),
        z.object({
            content: contentBlockSchema,
            sessionUpdate: z.literal("agent_thought_chunk"),
        }),
        z.object({
            _meta: z.record(z.unknown()).optional(),
            content: z.array(toolCallContentSchema).optional(),
            kind: z
                .union([
                z.literal("read"),
                z.literal("edit"),
                z.literal("delete"),
                z.literal("move"),
                z.literal("search"),
                z.literal("execute"),
                z.literal("think"),
                z.literal("fetch"),
                z.literal("switch_mode"),
                z.literal("other"),
            ])
                .optional(),
            locations: z.array(toolCallLocationSchema).optional(),
            rawInput: z.record(z.unknown()).optional(),
            rawOutput: z.record(z.unknown()).optional(),
            sessionUpdate: z.literal("tool_call"),
            status: z
                .union([
                z.literal("pending"),
                z.literal("in_progress"),
                z.literal("completed"),
                z.literal("failed"),
            ])
                .optional(),
            title: z.string(),
            toolCallId: z.string(),
        }),
        z.object({
            _meta: z.record(z.unknown()).optional(),
            content: z.array(toolCallContentSchema).optional().nullable(),
            kind: toolKindSchema.optional().nullable(),
            locations: z.array(toolCallLocationSchema).optional().nullable(),
            rawInput: z.record(z.unknown()).optional(),
            rawOutput: z.record(z.unknown()).optional(),
            sessionUpdate: z.literal("tool_call_update"),
            status: toolCallStatusSchema.optional().nullable(),
            title: z.string().optional().nullable(),
            toolCallId: z.string(),
        }),
        z.object({
            _meta: z.record(z.unknown()).optional(),
            entries: z.array(planEntrySchema),
            sessionUpdate: z.literal("plan"),
        }),
        z.object({
            availableCommands: z.array(availableCommandSchema),
            sessionUpdate: z.literal("available_commands_update"),
        }),
        z.object({
            currentModeId: sessionModeIdSchema,
            sessionUpdate: z.literal("current_mode_update"),
        }),
    ]),
});
/** @internal */
export const clientRequestSchema = z.union([
    writeTextFileRequestSchema,
    readTextFileRequestSchema,
    requestPermissionRequestSchema,
    createTerminalRequestSchema,
    terminalOutputRequestSchema,
    releaseTerminalRequestSchema,
    waitForTerminalExitRequestSchema,
    killTerminalCommandRequestSchema,
    extMethodRequestSchema,
]);
/** @internal */
export const agentRequestSchema = z.union([
    initializeRequestSchema,
    authenticateRequestSchema,
    newSessionRequestSchema,
    loadSessionRequestSchema,
    setSessionModeRequestSchema,
    promptRequestSchema,
    setSessionModelRequestSchema,
    extMethodRequest1Schema,
]);
/** @internal */
export const agentResponseSchema = z.union([
    initializeResponseSchema,
    authenticateResponseSchema,
    newSessionResponseSchema,
    loadSessionResponseSchema,
    setSessionModeResponseSchema,
    promptResponseSchema,
    setSessionModelResponseSchema,
    extMethodResponse1Schema,
]);
/** @internal */
export const agentNotificationSchema = z.union([
    sessionNotificationSchema,
    extNotification1Schema,
]);
/** @internal */
export const agentClientProtocolSchema = z.union([
    clientRequestSchema,
    clientResponseSchema,
    clientNotificationSchema,
    agentRequestSchema,
    agentResponseSchema,
    agentNotificationSchema,
]);
//# sourceMappingURL=schema.js.map